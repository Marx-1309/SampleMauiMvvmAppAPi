// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WaterBillingMobileAppAPi.Data;

#nullable disable

namespace WaterBillingMobileAppAPi.Migrations
{
    [DbContext(typeof(WaterBillingMobileAppAPiContext))]
    partial class WaterBillingMobileAppAPiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0cdbaf8d-4c5e-4b52-b997-4268d72f28a4",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "523ee3a2-973f-4f6d-8d79-ac5e4dabb2f5",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9a5f05c4-3bff-44ec-8629-573ec5310ac4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ad3d6d3-090f-445f-a237-d5116f20eecb",
                            Email = "user@onesi.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@ONESI.LOCAL",
                            NormalizedUserName = "USER@ONESI.LOCAL",
                            PasswordHash = "AQAAAAIAAYagAAAAEEqd50F3JuOsyeVgn5Y2XVmQ1mONQhGmVLHCWu2fQvInSAtRX4Mxi6n+OnbGVDKoEg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c2ef9bb-a112-40d4-88f1-2c913e08be23",
                            TwoFactorEnabled = false,
                            UserName = "user@onesi.local"
                        },
                        new
                        {
                            Id = "a8a151c3-2800-4b6b-9799-bef0e48766d1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a83572c5-4a33-47d3-a9b8-0598602d5d62",
                            Email = "user@okalongo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@OKALONGO.LOCAL",
                            NormalizedUserName = "USER@OKALONGO.LOCAL",
                            PasswordHash = "AQAAAAIAAYagAAAAEFu47Q41OuhDBSeUMLfofA+Z43Zc/NldG14SPFU7gBXdwC/fNw5x9CvzgiJ5UzaHpA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c2321c66-7456-42ed-a109-c2a6a4913864",
                            TwoFactorEnabled = false,
                            UserName = "user@okalongo.local"
                        },
                        new
                        {
                            Id = "95535cdc-2502-4eff-b53b-f556107afefd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83490c83-bd91-4a7a-80cb-aa43472c710b",
                            Email = "user@ogongo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@OGONGO.LOCAL",
                            NormalizedUserName = "USER@OGONGO.LOCAL",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ1SR8kaAaPy0F+UUb55Nc9a0DO6I4BAv/aZgYTzi1bo9o9QZ90QD6C7r1eOsKpgWQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5c8d0a0-f6c6-461e-ab58-21446371e747",
                            TwoFactorEnabled = false,
                            UserName = "user@ogongo.local"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9a5f05c4-3bff-44ec-8629-573ec5310ac4",
                            RoleId = "523ee3a2-973f-4f6d-8d79-ac5e4dabb2f5"
                        },
                        new
                        {
                            UserId = "a8a151c3-2800-4b6b-9799-bef0e48766d1",
                            RoleId = "523ee3a2-973f-4f6d-8d79-ac5e4dabb2f5"
                        },
                        new
                        {
                            UserId = "95535cdc-2502-4eff-b53b-f556107afefd",
                            RoleId = "523ee3a2-973f-4f6d-8d79-ac5e4dabb2f5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WaterBillingMobileAppAPi.Models.AspNetUserSites", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AspNetUserSites");
                });

            modelBuilder.Entity("WaterBillingMobileAppAPi.Models.BillingLocation", b =>
                {
                    b.Property<long>("BillingLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BillingLocationID"));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BillingLocationID");

                    b.ToTable("Bs_BillingLocation");
                });

            modelBuilder.Entity("WaterBillingMobileAppAPi.Models.Customer", b =>
                {
                    b.Property<string>("CUSTNMBR")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CUSTNMBR");

                    b.Property<string>("CUSTCLAS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CUSTNAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("STATE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZIP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CUSTNMBR");

                    b.ToTable("RM00101");
                });

            modelBuilder.Entity("WaterBillingMobileAppAPi.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("WaterBillingMobileAppAPi.Models.Month", b =>
                {
                    b.Property<long>("MonthID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("MonthID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MonthID"));

                    b.Property<string>("MonthName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MonthID");

                    b.ToTable("BS_Month");
                });

            modelBuilder.Entity("WaterBillingMobileAppAPi.Models.RM00303", b =>
                {
                    b.Property<string>("SALSTERR")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SALSTERR");

                    b.ToTable("RM00303");
                });

            modelBuilder.Entity("WaterBillingMobileAppAPi.Models.Reading", b =>
                {
                    b.Property<long?>("WaterReadingExportDataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("WaterReadingExportDataID"));

                    b.Property<string>("AREA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CURRENT_READING")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CUSTOMER_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CUSTOMER_NUMBER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CUSTOMER_ZONING")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ERF_NUMBER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsCityTab")
                        .HasColumnType("bit");

                    b.Property<string>("METER_NUMBER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("METER_READER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("MeterImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<long?>("MonthID")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("PREVIOUS_READING")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReadingDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RouteNumber")
                        .HasColumnType("bigint");

                    b.Property<long>("WaterReadingExportID")
                        .HasColumnType("bigint");

                    b.Property<long?>("Year")
                        .HasColumnType("bigint");

                    b.HasKey("WaterReadingExportDataID");

                    b.HasIndex("WaterReadingExportID");

                    b.ToTable("BS_WaterReadingExportData");
                });

            modelBuilder.Entity("WaterBillingMobileAppAPi.Models.ReadingExport", b =>
                {
                    b.Property<long>("WaterReadingExportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("WaterReadingExportID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WaterReadingExportID"));

                    b.Property<long>("MonthID")
                        .HasColumnType("bigint");

                    b.Property<string>("SALSTERR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Year")
                        .HasColumnType("bigint");

                    b.HasKey("WaterReadingExportID");

                    b.ToTable("BS_WaterReadingExport");
                });

            modelBuilder.Entity("WaterBillingMobileAppAPi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WaterBillingMobileAppAPi.Models.Reading", b =>
                {
                    b.HasOne("WaterBillingMobileAppAPi.Models.ReadingExport", "WaterReadingExport")
                        .WithMany("Readings")
                        .HasForeignKey("WaterReadingExportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WaterReadingExport");
                });

            modelBuilder.Entity("WaterBillingMobileAppAPi.Models.ReadingExport", b =>
                {
                    b.Navigation("Readings");
                });
#pragma warning restore 612, 618
        }
    }
}
